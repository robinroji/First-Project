<%- include('../layouts/admin_header.ejs') %>

<section class="content-main">
    <div class="content-header">
        <h2 class="content-title">Add Product</h2>
        <div>
            <a href="/product/productPage" class="btn btn-outline-primary"><i class="fas fa-list"></i> Product List</a>
        </div>
    </div>
    <div class="card mb-4">
        <div class="card-body">
            <form id="productForm" action="/product/add_product" method="post" enctype="multipart/form-data" class="needs-validation">
                <!-- Your existing input fields -->



                <div class="mb-3">
                    <label for="productName" class="form-label">Product Name</label>
                    <input type="text" id="productName" class="form-control" name="pro_name" placeholder="Enter the product name" required>
                    <div class="invalid-feedback">Product name is required.</div>
                </div>
                <div class="mb-3">
                    <label for="productBrand" class="form-label">Product Brand</label>
                    <input type="text" id="productBrand" class="form-control" name="pro_brand" placeholder="Enter product brand" required>
                    <div class="invalid-feedback">Product brand is required.</div>
                </div>
                <div class="mb-3">
                    <label for="productDescription" class="form-label">Product Description</label>
                    <textarea id="productDescription" class="form-control" name="pro_description" rows="3" placeholder="Product description" required></textarea>
                    <div class="invalid-feedback">Product description is required.</div>
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label">Category</label>
                    <select id="category" name="pro_category" class="form-control" required>
                        <option value="">Select a category</option>
                        <% category.forEach(cat => { %>
                        <option value='<%= cat._id %>'><%= cat.name %></option>
                        <% }) %>
                    </select>
                    <div class="invalid-feedback">Please select a category.</div>
                </div>
                <div class="mb-3">
                    <label for="productPrice" class="form-label">Price</label>
                    <input type="number" id="productPrice" class="form-control" name="pro_reg_price" placeholder="Enter the original price" min="0" step="0.01" required>
                    <div class="invalid-feedback">Original price is required and must be a positive number.</div>
                </div>
                <div class="mb-3">
                    <label for="productQuantity" class="form-label">Quantity</label>
                    <input type="number" id="productQuantity" class="form-control" name="pro_quantity" placeholder="Enter quantity of the product" min="1" required>
                    <div class="invalid-feedback">Quantity is required and must be a positive number.</div>
                </div>
                <div class="mb-3">
                    <label for="offerPrice" class="form-label">Offer Price</label>
                    <input type="number" id="offerPrice" class="form-control" name="pro_sale_price" placeholder="Enter sales price" min="0" step="0.01" required>
                    <div class="invalid-feedback">Offer price is required and must be a positive number.</div>
                </div>
                <div class="mb-3">
                    <label for="productImages" class="form-label">Add New Images (Max 3 total)</label>
                    <input type="file" id="productImages" class="form-control" name="pro_images" multiple accept="image/*" >
                    <div class="invalid-feedback">Please upload up to 3 images.</div>
                </div>
                <div class="mb-3">
                    <label for="imagePreview" class="form-label">New Images Preview</label>
                    <div id="imagePreview" class="d-flex flex-wrap">
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Add Product</button>
            </form>
        </div>
    </div>
</section>

<!-- Cropper.js Modal -->
<div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div>
                    <img id="cropImage" style="max-width: 100%;" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="cropButton" class="btn btn-primary">Crop & Save</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet" />

<script>
document.addEventListener('DOMContentLoaded', function () {
    const fileInput = document.getElementById('productImages');
    const preview = document.getElementById('imagePreview');
    let cropper;
    const modal = new bootstrap.Modal(document.getElementById('cropperModal'));
    const cropImage = document.getElementById('cropImage');
    const fileInputLabel = document.querySelector('label[for="productImages"]'); // Label for the file input

    let croppedImages = []; // Array to store cropped images

    fileInput.addEventListener('change', (event) => {
        const files = event.target.files;

        if (files.length > 3) {
            alert('You can upload up to 3 images.');
            fileInput.value = '';
            return;
        }

        const file = files[0];
        const reader = new FileReader();

        reader.onload = (e) => {
            cropImage.src = e.target.result;
            modal.show();

            // Initialize Cropper.js
            if (cropper) {
                cropper.destroy();
            }
            cropper = new Cropper(cropImage, {
                aspectRatio: 1,
                viewMode: 2,
            });

            // Hide the "select file" label
            fileInputLabel.textContent = 'Images selected for cropping...';
            fileInputLabel.style.color = 'green';

            // Clear the original file input to prevent submission of the raw image
            fileInput.value = '';
        };

        reader.readAsDataURL(file);
    });

    document.getElementById('cropButton').addEventListener('click', () => {
        if (cropper) {
            cropper.getCroppedCanvas().toBlob((blob) => {
                if (blob) {
                    const croppedFile = new File([blob], `cropped-image-${croppedImages.length + 1}.jpg`, { type: 'image/jpeg' });

                    croppedImages.push(croppedFile);

                    // Display cropped image in the preview section
                    const imgDiv = document.createElement('div');
                    imgDiv.classList.add('image-preview', 'position-relative');
                    imgDiv.style.marginRight = '10px';

                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(croppedFile);
                    img.style.maxWidth = '200px';

                    const removeBtn = document.createElement('button');
                    removeBtn.type = 'button';
                    removeBtn.classList.add('btn', 'btn-danger', 'btn-sm', 'position-absolute');
                    removeBtn.style.top = '5px';
                    removeBtn.style.right = '5px';
                    removeBtn.textContent = 'Remove';
                    removeBtn.onclick = function () {
                        const index = croppedImages.indexOf(croppedFile);
                        if (index > -1) {
                            croppedImages.splice(index, 1);
                        }
                        imgDiv.remove();

                        // Update label text if no images remain
                        if (croppedImages.length === 0) {
                            fileInputLabel.textContent = 'Select one or more images';
                            fileInputLabel.style.color = 'black';
                        }
                    };

                    imgDiv.appendChild(img);
                    imgDiv.appendChild(removeBtn);
                    preview.appendChild(imgDiv);

                    modal.hide();
                }
            });
        }
    });

    const form = document.getElementById('productForm');
    form.addEventListener('submit', async (event) => {
        event.preventDefault();

        try {
            const formData = new FormData(form);

            // Append only cropped images to formData
            croppedImages.forEach((file) => {
                formData.append('pro_images', file);
            });

            const response = await fetch('/product/add_product', {
                method: 'POST',
                body: formData,
            });

            if (!response.ok) {
                throw new Error('Failed to add the product. Please try again.');
            }

            const data = await response.json();
            alert('Product added successfully!');
            window.location.href = '/product/productPage';
        } catch (error) {
            console.error('Error:', error.message);
            alert('An error occurred while submitting the form. Please try again.');
        }
    });
});





////
// document.addEventListener('DOMContentLoaded', function() {
//     const fileInput = document.getElementById('productImages');
//     const preview = document.getElementById('imagePreview');
//     let cropper;
//     let croppedCanvas;

//     fileInput.addEventListener('change', handleFileSelect);

//     function handleFileSelect(event) {
//         const files = event.target.files;

//         if (files.length > 3) {
//             alert("You can upload up to 3 images.");
//             fileInput.value = "";
//             return;
//         }

//         Array.from(files).forEach(file => {
//             const reader = new FileReader();
//             reader.onload = function(e) {
//                 showCropperModal(e.target.result, file);
//             };
//             reader.readAsDataURL(file);
//         });
//     }

//     function showCropperModal(imageUrl, file) {
//         const modal = new bootstrap.Modal(document.getElementById('cropperModal'));
//         const cropImage = document.getElementById('cropImage');
//         cropImage.src = imageUrl;

//         modal.show();

//         if (cropper) {
//             cropper.destroy();
//         }
//         cropper = new Cropper(cropImage, {
//             aspectRatio: 1,
//             viewMode: 1,
//         });

//         document.getElementById('cropButton').onclick = function() {
//             croppedCanvas = cropper.getCroppedCanvas();
//             croppedCanvas.toBlob(function(blob) {
//                 const croppedFile = new File([blob], file.name, { type: file.type });

//                 displayCroppedImage(croppedCanvas, croppedFile);
//                 modal.hide();
//             });
//         };
//     }

//     function displayCroppedImage(canvas, file) {
//         const imgDiv = document.createElement('div');
//         imgDiv.classList.add('image-preview', 'position-relative');
//         imgDiv.style.marginRight = '10px';

//         const img = document.createElement('img');
//         img.src = canvas.toDataURL();
//         img.style.maxWidth = '200px';

//         const removeBtn = document.createElement('button');
//         removeBtn.type = 'button';
//         removeBtn.classList.add('btn', 'btn-danger', 'btn-sm', 'position-absolute');
//         removeBtn.style.top = '5px';
//         removeBtn.style.right = '5px';
//         removeBtn.textContent = 'Remove';
//         removeBtn.onclick = function() {
//             imgDiv.remove();
//         };

//         imgDiv.appendChild(img);
//         imgDiv.appendChild(removeBtn);
//         preview.appendChild(imgDiv);
//     }
// });
</script>

<style>
    .image-preview img {
        border: 1px solid #444;
        border-radius: 5px;
    }
</style>

<%- include('../layouts/admin_footer.ejs') %>
