<%- include('../layouts/admin_header.ejs') %>
<section class="content-main">
    <div class="content-header">
        <h2 class="content-title">Edit Product: </h2>
        <div>
            <a href="" class="btn btn-outline-primary"><i class="fas fa-list"></i> Product List</a>
        </div>
    </div>
    <div class="card mb-4">
        <div class="card-body">
            <form id="productForm" action="/product/edit_product/<%= product._id %>" method="post" enctype="multipart/form-data" onsubmit="return validateForm()">
                <input type="hidden" name="id" value="<%= product._id %>">
                
                <div class="mb-3">
                    <label for="productName" class="form-label">Product Name</label>
                    <input type="text" class="form-control" name="pro_name" placeholder="<%= product.product_name %>" value="<%= product.product_name %>">
                </div>
                
                <div class="mb-3">
                    <label for="productBrand" class="form-label">Product Brand</label>
                    <input type="text" class="form-control" name="pro_brand" placeholder="<%= product.product_brand %>" value="<%= product.product_brand %>" >
                </div>
                
                <div class="mb-3">
                    <label for="productDescription" class="form-label">Product Description</label>
                    <textarea class="form-control" name="pro_description" rows="3" placeholder="<%= product.product_description %>" ><%= product.product_description %></textarea>
                </div>
                
                <div class="mb-3">
                    <label for="category" class="form-label">Category</label>
                    <select name="pro_category" class="form-control" >
                        <% category.forEach(cat => { %>
                            <option value='<%= cat._id %>' <%= product.product_category === cat._id ? "selected" : "" %>><%= cat.name %></option>
                        <% }) %>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="productPrice" class="form-label">Price</label>
                    <input type="number" class="form-control" name="pro_reg_price" placeholder="<%= product.product_regular_price %>" value="<%= product.product_regular_price %>" min="0" >
                </div>
                
                <div class="mb-3">
                    <label for="units" class="form-label">Quantity</label>
                    <input type="number" class="form-control" name="pro_quantity" placeholder="<%= product.product_quantity %>" value="<%= product.product_quantity %>" min="1"y>
                </div>
                
                <div class="mb-3">
                    <label for="productOfferPrice" class="form-label">Offer Price</label>
                    <input type="number" id="saleprice" class="form-control" name="pro_sale_price" placeholder="<%= product.product_sale_price %>" value="<%= product.product_sale_price %>" min="0">
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Existing Images</label>
                    <div id="existingImages" class="image-list d-flex flex-wrap">
                        <% product.product_image.forEach((img, index) => { %>
                            <div class="image-item position-relative">
                                <img src="/newfile/<%= img %>" alt="Existing image" class="mt-2" style="max-width: 200px;">
                                <a onclick="removeImage(event,'<%= product._id %>','<%= img %>')" class="btn btn-danger">Remove</a>
                            </div>
                        <% }) %>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label for="productImages" class="form-label">Add New Images (Max 3 total)</label>
                    <input type="file" id="productImages" class="form-control" name="pro_images" multiple accept="image/*" >
                    <div class="invalid-feedback">Please upload up to 3 images.</div>
                </div>


               



                
                <div class="mb-3">
                    <label for="imagePreview" class="form-label">New Images Preview</label>
                    <div id="imagePreview" class="d-flex flex-wrap"></div>
                </div>
                <input  type="hidden" value=" "  id="offervalue"  name="offervalue" >
                <button  id="remove-btn" cla onclick="removeOffer(event,'<%= product._id %>' , offervalue.value)">Remove Offer </button><br><br>

                <div class="row">
                    <% productOffer.forEach((item) => {%> 


                        <div class="col-md-4 mb-4">
                            <div class="card">
                                <img src="<%= item.imageUrl %>" class="card-img-top" alt="<%= item.name %>">
                                <div class="card-body">
                                    <h5 class="card-title"><%= item.name %></h5>
                                    <p class="card-text"><strong>Offer percentage:<%= item.discountPercentage%></strong></p>
                                    <p class="card-text"><strong>Offer from :<%= item.startDate %></strong></p>
                                    <p class="card-text"><strong>Offer Expires :<%= item.expiryData %></strong></p>
                                    <p class="card-text"><strong>Description:<%= item.description %></strong></p>

                                    <button class="offer-btn" <% if(offerxist) {%> disabled <% } %> onclick="productofferButton(event,'<%= item._id %>','<%= product._id%>')">Apply Offer </button>
                                </div>
                            </div>
                        </div>
                        
                    <%  }) %>
                </div>  

                
                
                <button  type="submit" class="btn btn-primary">Update Product</button>
            </form>
        </div>
    </div>
</section>


<div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div>
                    <img id="cropImage" style="max-width: 100%;" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="cropButton" class="btn btn-primary">Crop & Save</button>
            </div>
        </div>
    </div>
</div>
<script>



document.getElementById('productImages').addEventListener('change', function (event) {
    const files = event.target.files; // Get the selected files
    const previewContainer = document.getElementById('imagePreview'); // Preview container
    previewContainer.innerHTML = ''; // Clear previous previews

    if (files.length > 3) {
        alert('You can upload a maximum of 3 images.');
        return;
    }

    Array.from(files).forEach((file) => {
        if (!file.type.startsWith('image/')) {
            alert('Only image files are allowed.');
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            const imgElement = document.createElement('img');
            imgElement.src = e.target.result; // Image source
            imgElement.alt = file.name; // Alt text
            imgElement.style = 'max-width: 150px; margin-right: 10px;'; // Style the image
            previewContainer.appendChild(imgElement); // Add the image to the preview container
        };
        reader.readAsDataURL(file); // Read the file
    });
});



let cropper; // Variable to hold the Cropper.js instance

// Trigger the Cropper.js modal when an image is selected
document.getElementById('productImages').addEventListener('change', function (event) {
    const files = event.target.files;
    if (files.length > 0) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const cropImage = document.getElementById('cropImage');
            cropImage.src = e.target.result;
            // Show the modal
            const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
            cropperModal.show();

            // Initialize Cropper.js
            cropper = new Cropper(cropImage, {
                aspectRatio: 1, // Adjust the aspect ratio as needed
                viewMode: 2,
                autoCropArea: 1,
            });
        };
        reader.readAsDataURL(files[0]);
    }
});



// Handle the "Crop & Save" button click
// Global variable to store cropped images
let croppedImages = [];

// Initialize the cropper when the modal opens
const imageElement = document.getElementById('imageElement'); // Image to be cropped

// Ensure Cropper.js is initialized after image is loaded
imageElement.onload = function () {
    cropper = new Cropper(imageElement, {
        aspectRatio: 1,  // Adjust as per requirement
        viewMode: 2,     // View mode for cropping behavior
    });
};

// Crop and Save Button
document.getElementById('cropButton').addEventListener('click', () => {
    console.log('clicked')
    // Check if the cropper is initialized
    if (cropper) {
        cropper.getCroppedCanvas().toBlob((blob) => {
            // Check if the blob is valid
            if (blob) {
                // Create a new File object from the blob
                const croppedFile = new File([blob], `cropped-image-${croppedImages.length + 1}.jpg`, { type: 'image/jpeg' });

                // Add the cropped image file to the croppedImages array
                croppedImages.push(croppedFile);

                // Display the cropped image in the preview section
                const imgDiv = document.createElement('div');
                imgDiv.classList.add('image-preview', 'position-relative');
                imgDiv.style.marginRight = '10px';

                const img = document.createElement('img');
                img.src = URL.createObjectURL(croppedFile);  // Display the cropped image using Object URL
                img.style.maxWidth = '200px';

                // Add a remove button for the cropped image
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.classList.add('btn', 'btn-danger', 'btn-sm', 'position-absolute');
                removeBtn.style.top = '5px';
                removeBtn.style.right = '5px';
                removeBtn.textContent = 'Remove';
                removeBtn.onclick = function () {
                    // Remove the image from croppedImages array and DOM
                    const index = croppedImages.indexOf(croppedFile);
                    if (index > -1) {
                        croppedImages.splice(index, 1);
                    }
                    imgDiv.remove();

                    // Update file input label if no images remain
                    const fileInputLabel = document.querySelector('label[for="productImages"]');
                    if (croppedImages.length === 0) {
                        fileInputLabel.textContent = 'Select one or more images';
                        fileInputLabel.style.color = 'black';
                    }
                };

                // Append the cropped image and remove button to the preview section
                imgDiv.appendChild(img);
                imgDiv.appendChild(removeBtn);
                const preview = document.getElementById('imagePreview');
                preview.appendChild(imgDiv);

                // Optionally, update label text after cropping
                const fileInputLabel = document.querySelector('label[for="productImages"]');
                fileInputLabel.textContent = 'Images selected';
                fileInputLabel.style.color = 'green';

                // Hide the modal after cropping
                const modal = new bootstrap.Modal(document.getElementById('cropperModal'));
                modal.hide();
            } else {
                console.error('Failed to create a blob from the cropped canvas.');
            }
        });
    } else {
        console.error('Cropper.js is not initialized or image not loaded.');
    }
});



</script>









<script>


let  offerAmount = 0

async function removeOffer(event,productId,offerAmount){
    console.log('off am',offerAmount)
    event.preventDefault()
    try {
        const response = await fetch('/product/removeOffer',{

            method:'post',
            headers:{
                'Content-Type':'application/json',
            },
            body:JSON.stringify({productId,offerAmount})
        })

        const data = await response.json();

        if(data){
            const buttons = document.querySelectorAll('.offer-btn');

            buttons.forEach(button => {
                button.disabled=false;
            });
            document.getElementById('remove-btn').disabled=true


            document.getElementById('saleprice').value = data.actualPrice
        }else{
            console.log('else workking')
        }

        Swal.fire({
                title: 'Success',
                text: 'Offer removed successfully!',
                icon: 'success',
                allowOutsideClick: false,
            });

    } catch (error) {
        console.log(error.message)
        
        
    }
}


    async function removeImage(event, product_id, img) {
        console.log('clicked');
        event.preventDefault();
        event.stopPropagation();
    
        try {
            Swal.fire({
                title: 'Loading...',
                text: 'Please wait while we process your request.',
                allowOutsideClick: false, // Prevent closing on outside click
                didOpen: () => {
                    Swal.showLoading();
                }
            });
    
            const response = await fetch('/product/img_delete', {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ product_id, img })
            });
    
            if (!response.ok) throw new Error('Response error');
    
            const data = await response.json();
    
            if (!data.success) throw new Error(data.message || 'Image deletion error');
            Swal.close();
            window.location.reload();
        } catch (error) {
            Swal.close();
            console.log(error);
        }
    }
    </script>
    <!-- //////////////////////////     offer Button       ////////////////////////////////////////////// -->
    <script>

        async function productofferButton(event,offerId,productId){
            event.preventDefault()

            try {

            const response = await fetch('/product/applyProducOffer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ offerId, productId }),
            });
    
            if (!response.ok) {
                throw new Error('Failed to apply offer. Please try again.');
            }
    
            const data = await response.json(); // Parse response
            console.log('Server Response:', data);

            offerAmount = data.offerAmount
            console.log('offerAmount is' ,data.offerAmount)

            document.getElementById('saleprice').value=data.amount

            document.getElementById('offervalue').value=offerAmount
            console.log('vl is',document.getElementById('offervalue').value)

    
            // Select all buttons with the class "offer-btn"
            const buttons = document.querySelectorAll('.offer-btn');
    
            // Disable all buttons
            buttons.forEach(button => {
                button.disabled= true;
            });

            document.getElementById('remove-btn').disabled=false
    
            // Show success message
            Swal.fire({
                title: 'Success',
                text: 'Offer applied successfully!',
                icon: 'success',
                allowOutsideClick: false,
            });
        } catch (error) {
            Swal.fire({
                title: 'Error',
                text: error.message,
                icon: 'error',
                allowOutsideClick: false,
            });
        }
    }
    </script>
    
    <script>
    function validateForm() {
        const productName = document.forms["productForm"]["pro_name"].value;
        const productBrand = document.forms["productForm"]["pro_brand"].value;
        const productDescription = document.forms["productForm"]["pro_description"].value;
        const category = document.forms["productForm"]["pro_category"].value;
        const regularPrice = document.forms["productForm"]["pro_reg_price"].value;
        const quantity = document.forms["productForm"]["pro_quantity"].value;
        const salePrice = document.forms["productForm"]["pro_sale_price"].value;
    
        if (!productName || !productBrand || !productDescription || !category || !regularPrice || !quantity) {
            alert("Please fill out all required fields.");
            return false;
        }
    
        if (isNaN(regularPrice) || regularPrice < 0) {
            alert("Please enter a valid positive number for Price.");
            return false;
        }
    
        if (isNaN(quantity) || quantity <= 0) {
            alert("Please enter a valid positive integer for Quantity.");
            return false;
        }
    
        if (salePrice && (isNaN(salePrice) || salePrice < 0)) {
            alert("Please enter a valid positive number for Offer Price.");
            return false;
        }
    
        const existingImages = document.getElementById('existingImages').children.length;
        const newImages = document.getElementById('imagePreview').children.length;
        if (existingImages + newImages > 3) {
            alert("You can only have up to 3 images in total.");
            return false;
        }
    
        return true;
    }
    </script>
    
    <%- include('../layouts/admin_footer.ejs') %>
    